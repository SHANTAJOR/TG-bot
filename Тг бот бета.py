import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
import os
TOKEN = os.getenv("BOT_TOKEN")


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –í–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º ===
ALL_JOBS = {
    "–ú–æ—Å–∫–≤–∞": {
        "16-18": [
            "üë®‚Äçüíª –†–∞–±–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏",
            "üì¶ –ö—É—Ä—å–µ—Ä –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω",
            "üé≠ –ü—Ä–æ–º–æ—É—Ç–µ—Ä –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö",
        ],
        "18+": [
            "üíº –û—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä",
            "üë∑ –°—Ç—Ä–æ–∏—Ç–µ–ª—å",
            "üçΩ –û—Ñ–∏—Ü–∏–∞–Ω—Ç –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ",
        ]
    },
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": {
        "16-18": [
            "üé® –†–∞–±–æ—Ç–∞ –≤ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ",
            "üö≤ –ö—É—Ä—å–µ—Ä –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ",
            "üõç –ü—Ä–æ–¥–∞–≤–µ—Ü –≤ —Å—É–≤–µ–Ω–∏—Ä–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ",
        ],
        "18+": [
            "üñ• –û–ø–µ—Ä–∞—Ç–æ—Ä –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞",
            "üîß –°–ª–µ—Å–∞—Ä—å",
            "üìä –ë—É—Ö–≥–∞–ª—Ç–µ—Ä-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç",
        ]
    }
}

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
user_data = {}
user_jobs = {}

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üèô –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city"),
        InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="change_age"),
        InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="search_job")
    )
    return keyboard

# === –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ ===
def city_menu():
    keyboard = InlineKeyboardMarkup(row_width=1)
    for city in ALL_JOBS.keys():
        keyboard.add(InlineKeyboardButton(city, callback_data=f"city_{city}"))
    return keyboard

# === –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ ===
def age_menu():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("16-18", callback_data="age_16-18"),
        InlineKeyboardButton("18+", callback_data="age_18+")
    )
    return keyboard

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {}
    user_jobs[user_id] = {}
    await message.answer("üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

@dp.callback_query_handler(lambda c: c.data == "change_city")
async def select_city(callback_query: types.CallbackQuery):
    await bot.edit_message_text(
        "üèô –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=city_menu()
    )

@dp.callback_query_handler(lambda c: c.data.startswith("city_"))
async def get_city(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    city = callback_query.data.split("_")[1]
    user_data[user_id]["city"] = city
    await bot.edit_message_text(
        f"‚úÖ –ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω: {city}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
        user_id,
        callback_query.message.message_id,
        reply_markup=age_menu()
    )

@dp.callback_query_handler(lambda c: c.data == "change_age")
async def select_age(callback_query: types.CallbackQuery):
    await bot.edit_message_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
        callback_query.from_user.id,
        callback_query.message.message_id,
        reply_markup=age_menu()
    )

@dp.callback_query_handler(lambda c: c.data.startswith("age_"))
async def get_age(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    age = callback_query.data.split("_")[1]
    user_data[user_id]["age"] = age

    city = user_data[user_id]["city"]
    user_jobs[user_id] = ALL_JOBS.get(city, {}).get(age, []).copy()

    await bot.edit_message_text(
        f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç –≤—ã–±—Ä–∞–Ω: {age}\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        user_id,
        callback_query.message.message_id,
        reply_markup=main_menu()
    )

@dp.callback_query_handler(lambda c: c.data == "search_job")
async def search_jobs(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    city = user_data.get(user_id, {}).get("city")
    age = user_data.get(user_id, {}).get("age")

    if not city or not age:
        await bot.edit_message_text(
            "‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –≤–æ–∑—Ä–∞—Å—Ç.",
            user_id,
            callback_query.message.message_id,
            reply_markup=main_menu()
        )
        return

    if not user_jobs[user_id]:  # –ï—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ–º
        user_jobs[user_id] = ALL_JOBS.get(city, {}).get(age, []).copy()

    job = user_jobs[user_id].pop(random.randrange(len(user_jobs[user_id])))  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
    await bot.edit_message_text(
        f"üîπ –í–∞–∫–∞–Ω—Å–∏—è: {job}",
        user_id,
        callback_query.message.message_id,
        reply_markup=main_menu()
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
